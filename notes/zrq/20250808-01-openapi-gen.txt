#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2025, Manchester (http://www.manchester.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#
# AIMetrics: []
#

    Target:

        Experiment with generating different components from the OpenAPI spec.

    Result:

        Work in progress ...

# -----------------------------------------------------
# Build the combined schema.
#[user@desktop]

    #
    # TODO Publish the schema processor as a Docker container.
    #

    source "${HOME:?}/calycopis.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name python-builder \
        --volume "${TREBULA_CODE}:/trebula:rw,z" \
        --volume "${ISOBEON_CODE}:/isobeon:rw,z" \
        --volume "${CALYCOPIS_CODE}:/calycopis:rw,z" \
        fedora:42 \
        bash

        dnf install -y \
            python3 \
            python3-pip

        pip3 install \
            pyyaml

        source=$(
            mktemp --directory
            )

        ln -s '/calycopis/java/spring/spring-openapi/openapi/openapi.yaml' "${source}"
        ln -s '/trebula/schema' "${source}"
        ls -al "${source}"

        target=/trebula/build

        ls -al "${target}"
        rm -rf "${target}"
        mkdir  "${target}"

        /isobeon/schema-processor.py \
            "${source}/openapi.yaml" \
            "${target}/openapi-full.yaml"

        ls -al "${target}"

        head "${target}/openapi-full.yaml"


# -----------------------------------------------------
# Experiment with the FastAPI generator.
# https://github.com/OpenAPITools/openapi-generator?tab=readme-ov-file#13---download-jar
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --interactive \
        --name python-builder \
        --volume "${TREBULA_CODE}:/trebula:rw,z" \
        --volume "${CALYCOPIS_CODE}/python:/python:rw,z" \
        fedora:42 \
        bash

        dnf install -y \
            wget

        wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.14.0/openapi-generator-cli-7.14.0.jar \
             -O /tmp/openapi-generator.jar

        dnf install -y \
            java-latest-openjdk

        source=/trebula/build/
        target=/python/albert

        rm -rf "${target}"
        mkdir  "${target}"

        #
        # Generate a Python client.
        # https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/python.md
        java -jar /tmp/openapi-generator.jar \
            generate \
            --generator-name python \
            --input-spec "${source}/openapi-full.yaml" \
            --output     "${target}/client"

        #
        # Generate the stubs for a Python FastAPI service.
        # https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/python-fastapi.md
        java -jar /tmp/openapi-generator.jar \
            generate \
            --generator-name python-fastapi \
            --input-spec "${source}/openapi-full.yaml" \
            --output     "${target}/fastapi"


# -----------------------------------------------------
# Test the FastAPI service stubs.
# Note - requirement for older version of Fedora seems to have been solved.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --interactive \
        --name python-tester \
        --volume "${CALYCOPIS_CODE}/python:/python:rw,z" \
        fedora:42 \
        bash

        dnf install -y \
            python3 \
            python3-pip \
            python3-devel \
            python3-uvicorn

        dnf install -y \
            g++ \
            gcc

        pip3 install \
            wheel \
            fastapi

        pushd  /python/albert/fastapi

            pip3 install \
                -r requirements.txt

            pushd src

                uvicorn openapi_server.main:app --host 0.0.0.0 --port 8080

    >   INFO:     Started server process [220]
    >   INFO:     Waiting for application startup.
    >   INFO:     Application startup complete.
    >   INFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
    >   ....
    >   ....

        #
        # So in theory we have an webapp with JSON/YAML message processing.
        # Now we need to fill in the business logic.
        #

# -----------------------------------------------------
# Create our testing pod.
#[user@desktop]

    podman pod create \
        --publish 8082 \
        --name testing


# -----------------------------------------------------
# Build and run the Java broker.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --pod testing \
        --interactive \
        --name spring-builder \
        --volume "${HOME}/.m2/repository:/root/.m2/repository:rw,z" \
        --volume "${TREBULA_CODE}:/trebula:rw,z" \
        --volume "${CALYCOPIS_CODE}/java:/java:rw,z" \
        --volume "${CALYCOPIS_CODE}/examples:/examples:rw,z" \
        ghcr.io/ivoa/calycopis/java-builder:2024.08.30 \
        bash

    pushd /java/spring/spring-openapi

        rm -rf ./openapi/target
        mkdir  ./openapi/target
        ln -s  /trebula/build/openapi-full.yaml \
               ./openapi/target/openapi-full.yaml

        ./mvnw clean install

    popd

    pushd /java/spring/spring-webapp  ; ./mvnw clean spring-boot:run ; popd

        ....
        ....

# -----------------------------------------------------
# -----------------------------------------------------
# Check the examples work.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --pod testing \
        --interactive \
        --name curl-tester \
        --volume "${CALYCOPIS_CODE}/examples:/examples:rw,z" \
        fedora:42 \
        bash

        dnf install -y \
            curl \
            yq

        examplename=example-001
        examplebase=/examples/${examplename}/${examplename}

        curl \
            --silent \
            --show-error \
            --header 'Content-Type: application/yaml' \
            --data-binary "@${examplebase}-001-offerset-request.yaml" \
            --header 'Accept: application/yaml' \
            'http://127.0.0.1:8082/offersets' \
        | yq '.'

--START--
uuid: "57f4ec20-3206-4599-9f0a-e92265908f7c"
name: "example-001"
type: "https://www.purl.org/ivoa.net/EB/schema/types/offerset/offerset-response-1.0"
created: "2025-08-08T16:12:40.517249152Z"
href: "http://127.0.0.1:8082/offersets/57f4ec20-3206-4599-9f0a-e92265908f7c"
result: "YES"
offers:
  - uuid: "28e4ea25-4984-44e0-a92b-ec5a0d80174f"
    name: "example-001-offer-0"
    type: "https://www.purl.org/ivoa.net/EB/schema/types/session/execution-session-response-1.0"
    created: "2025-08-08T16:12:40.86329987Z"
    href: "http://127.0.0.1:8082/sessions/28e4ea25-4984-44e0-a92b-ec5a0d80174f"
    phase: "OFFERED"
    expires: "2025-08-08T21:12:40.517267275Z"
    ....
    ....
  - uuid: "f033c448-4cb2-497b-9245-5b7cbf01760e"
    name: "example-001-offer-1"
    type: "https://www.purl.org/ivoa.net/EB/schema/types/session/execution-session-response-1.0"
    created: "2025-08-08T16:12:40.874087299Z"
    href: "http://127.0.0.1:8082/sessions/f033c448-4cb2-497b-9245-5b7cbf01760e"
    phase: "OFFERED"
    expires: "2025-08-08T21:12:40.517267275Z"
    ....
    ....
  - uuid: "e4e3f633-604b-4dc9-a277-269c87de31be"
    name: "example-001-offer-2"
    type: "https://www.purl.org/ivoa.net/EB/schema/types/session/execution-session-response-1.0"
    created: "2025-08-08T16:12:40.887005976Z"
    href: "http://127.0.0.1:8082/sessions/e4e3f633-604b-4dc9-a277-269c87de31be"
    phase: "OFFERED"
    expires: "2025-08-08T21:12:40.517267275Z"
    ....
    ....
  - uuid: "63175731-c561-4abc-a336-1ed56db2f085"
    name: "example-001-offer-3"
    type: "https://www.purl.org/ivoa.net/EB/schema/types/session/execution-session-response-1.0"
    created: "2025-08-08T16:12:40.899409187Z"
    href: "http://127.0.0.1:8082/sessions/63175731-c561-4abc-a336-1ed56db2f085"
    phase: "OFFERED"
    expires: "2025-08-08T21:12:40.517267275Z"
    ....
    ....
--END--


# -----------------------------------------------------
# -----------------------------------------------------
# Try using the Python client.
#[user@desktop]

    source "${HOME:?}/calycopis.env"
    podman run \
        --rm \
        --tty \
        --pod testing \
        --interactive \
        --name python-tester \
        --volume "${CALYCOPIS_CODE}/python:/python:rw,z" \
        fedora:42 \
        bash

        dnf install -y \
            python3 \
            python3-pip

        pushd /python/albert/client/

            ls -al

--START--
total 52
drwxr-xr-x. 1 root root  404 Aug  8 14:13 .
drwxr-xr-x. 1 root root   26 Aug  8 16:17 ..
drwxr-xr-x. 1 root root   18 Aug  8 14:13 .github
-rw-r--r--. 1 root root  807 Aug  8 14:13 .gitignore
-rw-r--r--. 1 root root  713 Aug  8 14:13 .gitlab-ci.yml
drwxr-xr-x. 1 root root   24 Aug  8 14:13 .openapi-generator
-rw-r--r--. 1 root root 1040 Aug  8 14:13 .openapi-generator-ignore
-rw-r--r--. 1 root root  431 Aug  8 14:13 .travis.yml
-rw-r--r--. 1 root root 6101 Aug  8 14:13 README.md
drwxr-xr-x. 1 root root 2594 Aug  8 14:13 docs
-rw-r--r--. 1 root root 1830 Aug  8 14:13 git_push.sh
drwxr-xr-x. 1 root root  184 Aug  8 14:13 openapi_client
-rw-r--r--. 1 root root 2482 Aug  8 14:13 pyproject.toml
-rw-r--r--. 1 root root   92 Aug  8 14:13 requirements.txt
-rw-r--r--. 1 root root   28 Aug  8 14:13 setup.cfg
-rw-r--r--. 1 root root 1271 Aug  8 14:13 setup.py
drwxr-xr-x. 1 root root 3466 Aug  8 14:13 test
-rw-r--r--. 1 root root  112 Aug  8 14:13 test-requirements.txt
-rw-r--r--. 1 root root  150 Aug  8 14:13 tox.ini
--END--

        #
        # Install setup tools.
        pip install \
            setuptools

        #
        # Install the client library.
        python setup.py install

--START--
configuration error: `project.license` must be valid exactly by one definition (0 matches found):
....
....
--END--

        #
        # License in the generated toml file is not a valid SPDX code.
        # We would want to change it anyway.
        # https://spdx.org/licenses/

        #
        # Install dasel to edit the toml file.
        # https://daseldocs.tomwright.me/
        # https://daseldocs.tomwright.me/installation#manual

        curl -sSLf "$(
            curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4
            )" -L -o /tmp/dasel && chmod +x /tmp/dasel
        mv /tmp/dasel /usr/local/bin/dasel

        dasel \
            --read toml \
            --file pyproject.toml \
            'project.license'

--START--
'Creative Commons Attribution Share Alike 4.0 International'
--END--


        dasel put \
            --read toml \
            --file pyproject.toml \
            --type string \
            --value 'GPL-3.0-or-later' \
            'project.license'

        dasel \
            --read toml \
            --file pyproject.toml \
            'project.license'

--START--
'GPL-3.0-or-later'
--END--


        #
        # Install the client library.
        python setup.py install


--START--
....
....
********************************************************************************
Please avoid running ``setup.py`` directly.
Instead, use pypa/build, pypa/installer or other
standards-based tools.

By 2025-Oct-31, you need to update your project and remove deprecated calls
or your builds will no longer be supported.

See https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html for details.
********************************************************************************
....
....
byte-compiling /usr/local/lib/python3.13/site-packages/openapi_client/api/default_api.py to default_api.cpython-313.pyc
byte-compiling /usr/local/lib/python3.13/site-packages/openapi_client/api/__init__.py to __init__.cpython-313.pyc
running install_egg_info
Copying openapi_client.egg-info to /usr/local/lib/python3.13/site-packages/openapi_client-1.0.0-py3.13.egg-info
running install_scripts
--END--

        #
        # Shhesh .. this is just a Python library.
        #

        #
        # Try using the packge ...
        #

        python

import openapi_client

--START--
....
....
  File "/python/albert/client/openapi_client/api/default_api.py", line 15, in <module>
    from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
ModuleNotFoundError: No module named 'pydantic'
--END--

        #
        # OK, what if anything did the install actually acheive !?
        # Next time skip the setup process ...
        #

        pip install -r requirements.txt

--START--
....
....
Installing collected packages: urllib3, typing-extensions, six, annotated-types, typing-inspection, python_dateutil, pydantic-core, pydantic
Successfully installed annotated-types-0.7.0 pydantic-2.11.7 pydantic-core-2.33.2 python_dateutil-2.9.0.post0 six-1.17.0 typing-extensions-4.14.1 typing-inspection-0.4.1 urllib3-2.5.0
--END--

        python

import openapi_client
from openapi_client.rest import ApiException
from pprint import pprint

configuration = openapi_client.Configuration(
    host = "http://127.0.0.1:8082"
)

with openapi_client.ApiClient(configuration) as api_client:

    api_instance = openapi_client.DefaultApi(api_client)
    uuid = '63175731-c561-4abc-a336-1ed56db2f085'

    try:
        api_response = api_instance.execution_session_get(uuid)
        print("The response of DefaultApi->execution_session_get:\n")
        pprint(api_response)

    except ApiException as e:
        print("Exception when calling DefaultApi->execution_session_get: %s\n" % e)

--START--
....
....
  File "/python/albert/client/openapi_client/models/execution_session_response.py", line 157, in from_dict
    "schedule": ComponentSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/python/albert/client/openapi_client/models/component_schedule.py", line 92, in from_dict
    "offered": OfferedScheduleBlock.from_dict(obj["offered"]) if obj.get("offered") is not None else None,
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "/python/albert/client/openapi_client/models/offered_schedule_block.py", line 97, in from_dict
    "available": OfferedScheduleInterval.from_dict(obj["available"]) if obj.get("available") is not None else None,
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "/python/albert/client/openapi_client/models/offered_schedule_interval.py", line 104, in from_dict
    _obj = cls.model_validate({
        "duration": obj.get("duration"),
        "start": obj.get("start")
    })
  File "/usr/local/lib/python3.13/site-packages/pydantic/main.py", line 705, in model_validate
    return cls.__pydantic_validator__.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        obj, strict=strict, from_attributes=from_attributes, context=context, by_alias=by_alias, by_name=by_name
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
pydantic_core._pydantic_core.ValidationError: 1 validation error for OfferedScheduleInterval
start
  Value error, must validate the regular expression
    /^(\d{4}(?:-\d{2}){2}T\d{2}(?::\d{2}){2}(?>[^\/]+))\/(P(?=.)(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?=.)(?:\d+H)?(?:\d+M)?(?:\d+S)?)?)$/
    [type=value_error, input_value='2025-08-08T22:13:00Z', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error
--END--

    #
    # Looks like the date formatting is wrong.
    # Found a bug in our schema.
    # https://github.com/Zarquan/Calycopis-schema/blob/71ed9f2165ef9c6430b556c4661d5893c491ccaf/schema/components/utils.yaml#L63-L70

        ISO8601Interval:
          description: >-
            A regular expression filter for an ISO 8601 interval.
            TODO Add timezone to the start time.
            TODO Expand this to allow [start+end] and [duration+end] ?
          type: string
          title: ISO8601Interval
          pattern: '^(\d{4}(?:-\d{2}){2}T\d{2}(?::\d{2}){2}(?>[^\/]+))\/(P(?=.)(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?=.)(?:\d+H)?(?:\d+M)?(?:\d+S)?)?)$'

# -----------------------------------------------------

    #
    # Fix the regex in Calycopis schema ...
    #

# -----------------------------------------------------




